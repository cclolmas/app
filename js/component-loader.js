/**
 * Component Loader e Visualization Helper
 * 
 * Este m√≥dulo garante que todos os componentes necess√°rios para visualiza√ß√µes
 * sejam carregados corretamente e na ordem certa.
 */

// Objeto global para gerenciar componentes
window.ComponentLoader = {
  // Componentes registrados
  components: {},
  
  // Status da inicializa√ß√£o
  initialized: false,
  
  // Registrar um componente
  register: function(name, initFunction) {
    this.components[name] = {
      init: initFunction,
      loaded: false
    };
    console.log(`üîå Componente "${name}" registrado`);
    return this;
  },
  
  // Inicializar um componente espec√≠fico
  initComponent: function(name) {
    const component = this.components[name];
    if (!component) {
      console.warn(`‚ö†Ô∏è Componente "${name}" n√£o registrado`);
      return false;
    }
    
    if (component.loaded) {
      console.log(`‚ÑπÔ∏è Componente "${name}" j√° foi inicializado`);
      return true;
    }
    
    try {
      component.init();
      component.loaded = true;
      console.log(`‚úÖ Componente "${name}" inicializado com sucesso`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erro ao inicializar "${name}":`, error);
      return false;
    }
  },
  
  // Inicializar todos os componentes registrados
  initAll: function() {
    console.log('üöÄ Inicializando todos os componentes registrados...');
    let success = true;
    
    Object.keys(this.components).forEach(name => {
      if (!this.initComponent(name)) {
        success = false;
      }
    });
    
    this.initialized = true;
    if (success) {
      console.log('‚úÖ Todos os componentes inicializados com sucesso');
      // Emitir evento para informar que todos os componentes foram carregados
      document.dispatchEvent(new CustomEvent('components:loaded'));
    } else {
      console.warn('‚ö†Ô∏è Alguns componentes n√£o puderam ser inicializados');
    }
    
    return success;
  },
  
  // Verificar se elemento existe antes de usar
  safeGetElement: function(id) {
    const element = document.getElementById(id);
    if (!element) {
      console.debug(`üîç Elemento com ID "${id}" n√£o encontrado no DOM atual`);
      return null;
    }
    return element;
  },
  
  // Atualizar componentes espec√≠ficos ap√≥s mudan√ßas no DOM
  refreshComponent: function(name) {
    if (this.components[name] && typeof this.components[name].refresh === 'function') {
      console.log(`üîÑ Atualizando componente "${name}"`);
      this.components[name].refresh();
    }
  }
};

// Registramos os componentes principais de visualiza√ß√£o
window.ComponentLoader.register('balanceIndicator', function() {
  // Esta fun√ß√£o verifica se temos updateBalanceIndicator dispon√≠vel
  if (typeof window.updateBalanceIndicator !== 'function') {
    // Se n√£o tiver, vamos definir uma implementa√ß√£o stub para evitar erros
    window.updateBalanceIndicator = function(metrics) {
      console.warn('‚ö†Ô∏è updateBalanceIndicator chamado, mas n√£o est√° implementado corretamente', metrics);
    };
    
    // Carregar dinamicamente o script balance-indicator.js se necess√°rio
    const script = document.createElement('script');
    script.src = '/js/balance-indicator.js';
    script.async = true;
    script.onload = function() {
      console.log('‚úÖ Script balance-indicator.js carregado com sucesso');
      // Tentar atualizar com valores padr√£o ap√≥s carregar
      if (typeof window.updateBalanceIndicator === 'function') {
        window.updateBalanceIndicator({});
      }
    };
    document.head.appendChild(script);
  }
}).register('charts', function() {
  // Apenas um stub para exemplificar - isto seria implementado conforme necess√°rio
  console.log('üìä Inicializando m√≥dulos de gr√°ficos...');
  
  // Verificar se o Chart.js est√° dispon√≠vel
  if (typeof Chart === 'undefined') {
    console.warn('‚ö†Ô∏è Chart.js n√£o est√° dispon√≠vel. Tentando carregar dinamicamente...');
    
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
    script.async = true;
    script.onload = function() {
      console.log('‚úÖ Chart.js carregado com sucesso');
      // Inicializar gr√°ficos aqui
    };
    document.head.appendChild(script);
  }
});

// Inicializamos quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
  window.ComponentLoader.initAll();
  
  // Adicionamos um listener para content-updated para reinicializar componentes espec√≠ficos
  document.addEventListener('content:updated', function(event) {
    const components = event.detail && event.detail.components ? event.detail.components : ['balanceIndicator', 'charts'];
    components.forEach(function(component) {
      window.ComponentLoader.refreshComponent(component);
    });
  });
});

// Exportar uma fun√ß√£o para atualizar componentes em casos espec√≠ficos
window.refreshComponents = function(componentNames) {
  const componentsToRefresh = componentNames || Object.keys(window.ComponentLoader.components);
  
  componentsToRefresh.forEach(function(name) {
    window.ComponentLoader.refreshComponent(name);
  });
  
  console.log('üîÑ Componentes atualizados ap√≥s altera√ß√µes no DOM');
};
